{"version":3,"sources":["TodoBanner.js","TodoCreator.js","TodoRow.js","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","render","className","props","name","tasks","filter","t","done","length","Component","TodoCreator","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","callback","state","onChange","onClick","TodoRow","item","key","action","type","checked","App","todoItems","find","task","changeStateData","userName","toggleTodo","todo","map","todoTableRows","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8d85de5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class TodoBanner extends Component {\n  render = () =>\n    <h4 className=\"bg-primary text-white text-center p-2\">\n      {this.props.name}'s To Do List\n       ({this.props.tasks.filter(t => !t.done).length} items to do)\n    </h4>\n\n}","import React, { Component } from 'react'\n\nexport class TodoCreator extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            newItemText: \"\"\n        }\n    }\n\n    updateNewTextValue = (event) => {\n        this.setState({\n            newItemText: event.target.value\n        })\n    }\n\n    createNewTodo = () => {\n        this.props.callback(this.state.newItemText);\n        this.setState({newItemText: \"\"})\n    }\n\n    render = () => \n    <div className=\"my-1\">\n        <input className=\"form-control\" value={this.state.newItemText} onChange={this.updateNewTextValue}/>\n        <button className=\"btn btn-primary mt-1\" onClick={this.createNewTodo}>Add</button>\n    </div>\n}","import React, { Component } from 'react'\n\nexport class TodoRow extends Component {\n  render = () => {\n    var item = this.props.item\n\n    return (\n      <tr key={this.props.key}>\n        <td>{item.action}</td>\n        <td>\n          <input type=\"checkbox\" checked={item.done} onChange={() => this.props.callback(this.props.item)} />\n        </td>\n      </tr>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { TodoBanner } from './TodoBanner'\nimport { TodoCreator } from './TodoCreator'\nimport { TodoRow } from './TodoRow'\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userName: \"Budi\",\n      todoItems: [\n        { action: \"Buy Flowers\", done: false },\n        { action: \"Get Shoes\", done: false },\n        { action: \"Collect Ticket\", done: true },\n        { action: \"Call Joe\", done: false }\n      ],\n      // newItemText: \"\"\n    }\n  }\n\n  updateNewTextValue = (event) => {\n    this.setState({ newItemText: event.target.value })\n  }\n\n  createNewTodo = () => {\n    if (!this.state.todoItems.find(item => item.action === this.state.newItemText)) {\n      this.setState({\n        todoItems: [\n          ...this.state.todoItems,\n          {\n            action: this.state.newItemText,\n            done: false\n          }\n        ],\n        newItemText: \"\"\n      })\n    }\n  }\n\n  createNewTodo = (task) => {\n\n    if(!task) {\n      return\n    }\n    \n    if (!this.state.todoItems.find(item => item.action === task)) {\n      this.setState({\n        todoItems: [...this.state.todoItems, {action: task, done: false}]\n      })\n    }\n  }\n\n  changeStateData = () => {\n    this.setState({\n      userName: this.state.userName === \"Budi\" ? \"Charlie\" : \"Budi\"\n    })\n  }\n\n  toggleTodo = (todo) => {\n    this.setState({\n      todoItems: this.state.todoItems.map(item => item.action === todo.action ? { ...item, done: !item.done } : item)\n    })\n  }\n\n  todoTableRows = () => this.state.todoItems.map(item =>\n    <TodoRow key={item.action} item={item} callback={this.toggleTodo} />\n  )\n\n  render = () =>\n    <div>\n      <TodoBanner name={this.state.userName} tasks={this.state.todoItems} />\n\n      <div className=\"container-fluid\">\n        <TodoCreator callback={this.createNewTodo} />\n        <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Description</th><th>Done</th>\n          </tr>\n        </thead>\n        <tbody>{this.todoTableRows()}</tbody>\n      </table>\n      </div>\n    </div>\n\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}